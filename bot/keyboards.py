from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder


class Keyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞"""
    
    @staticmethod
    def main_menu() -> ReplyKeyboardBuilder:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
        builder = ReplyKeyboardBuilder()
        builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é")
        builder.button(text="üìö –ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        builder.adjust(2, 2)
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=False)

    @staticmethod
    def editor_keyboard(article_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{article_id}")
        builder.button(text="üì§ –ù–∞ —Ä–µ–≤—å—é", callback_data=f"review_{article_id}")
        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{article_id}")
        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def reviewer_keyboard(article_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–≤—å—é–µ—Ä–∞"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{article_id}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{article_id}")
        builder.button(text="‚úèÔ∏è –ü—Ä–∞–≤–∫–∏", callback_data=f"request_changes_{article_id}")
        builder.button(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{article_id}")
        builder.adjust(2, 2)
        return builder.as_markup()

    @staticmethod
    def publish_keyboard(article_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{article_id}")
        builder.button(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"schedule_{article_id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_review")
        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def back_keyboard() -> InlineKeyboardMarkup:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        return builder.as_markup()

    @staticmethod
    def confirmation_keyboard(action: str, item_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action}_{item_id}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")
        return builder.as_markup()

    @staticmethod
    def settings_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
        builder.button(text="üë• –î–æ—Å—Ç—É–ø", callback_data="settings_access")
        builder.button(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="settings_schedule")
        builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1, 1, 2)
        return builder.as_markup()

    @staticmethod
    def pagination(page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è", callback_data=f"{prefix}_prev_{page}")
        builder.button(text=f"{page}/{total_pages}", callback_data="current_page")
        builder.button(text="‚û°Ô∏è", callback_data=f"{prefix}_next_{page}")
        return builder.as_markup()
    