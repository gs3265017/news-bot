"""news_bot v0.1"""
import os
import asyncio
import logging
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InputFile, CallbackQuery
from dotenv import load_dotenv

from crypto import Crypto
from database import AsyncDatabase
from keyboards import Keyboards

ADMINS = list(map(int, os.getenv("ADMIN_IDS").split(',')))

def admin_required(func):
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in ADMINS:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        return await func(message, *args, **kwargs)
    return wrapper

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)
load_dotenv()

class ArticleStates(StatesGroup):
    DRAFT = State()
    REVIEW = State()
    APPROVED = State()
    REJECTED = State()
    REQUEST_CHANGES = State()
    SCHEDULED = State()

class NewsBot:
    def __init__(self):
        self._check_env_vars()
        self.bot = Bot(token=os.getenv("BOT_TOKEN"))
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.db = AsyncDatabase()
        self.crypto = Crypto(os.getenv("ENCRYPTION_KEY"))
        self.vault_path = Path(os.getenv("VAULT_PATH"))
        self.keyboards = Keyboards()
        
        self._register_handlers()

    def _check_env_vars(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = [
            'BOT_TOKEN', 
            'ENCRYPTION_KEY', 
            'VAULT_PATH', 
            'REVIEWER_CHAT_ID'
        ]
        missing = [var for var in required_vars if not os.getenv(var)]
        if missing:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

    async def _get_channel_id_handler(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞
        """
        if not message.forward_from_chat:
            return await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")
        
        chat = message.forward_from_chat
        await message.answer(
            f"üîç –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"Username: @{chat.username}\n"
            f"ID: `{chat.id}`\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ .env —Ñ–∞–π–ª:\n"
            f"CHANNEL_ID={chat.id}",
            parse_mode="Markdown"
        )

    async def _start_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "üìù –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏",
            reply_markup=self.keyboards.main_menu()
        )

    async def _text_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if await state.get_state() != ArticleStates.DRAFT:
                return

            user_id = message.from_user.id
            draft_path = self.vault_path / f"draft_{user_id}_{message.message_id}.md"
            
            draft_path.write_text(message.text, encoding='utf-8')
            encrypted_path = self.vault_path / f"{draft_path.name}.enc"
            encrypted_path.write_bytes(self.crypto.encrypt_file(draft_path))
            
            article_id = await self.db.add_article(user_id, str(encrypted_path))
            
            await state.set_state(ArticleStates.DRAFT)
            await state.update_data(article_id=article_id)
            await message.answer(
                "‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                reply_markup=self.keyboards.editor_keyboard(article_id)
            )
            
        except Exception as e:
            logger.error(f"Error in _text_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞")

    async def _edit_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            article_id = int(callback.data.split("_")[1])
            article = await self.db.get_article(article_id)
            
            if not article or not Path(article.file_path).exists():
                await callback.answer("–§–∞–π–ª —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            decrypted = self.crypto.decrypt_file(Path(article.file_path).read_bytes())
            temp_path = Path("/tmp") / f"{article_id}.md"
            temp_path.write_text(decrypted, encoding='utf-8')
            
            os.system(f"open -a Obsidian {temp_path}")
            await callback.answer("–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ Obsidian")
            
        except Exception as e:
            logger.error(f"Error in _edit_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞")

    async def _review_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–µ–≤—å—é"""
        try:
            article_id = int(callback.data.split("_")[1])
            await self.db.update_status(article_id, "review")
            
            article = await self.db.get_article(article_id)
            if not article or not Path(article.file_path).exists():
                await callback.answer("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            await self.bot.send_document(
                chat_id=os.getenv("REVIEWER_CHAT_ID"),
                document=InputFile(article.file_path),
                caption=f"üìÑ –°—Ç–∞—Ç—å—è #{article_id} –Ω–∞ —Ä–µ–≤—å—é",
                reply_markup=self.keyboards.reviewer_keyboard(article_id)
            )
            await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–µ–≤—å—é!")
            await state.set_state(ArticleStates.REVIEW)
            
        except Exception as e:
            logger.error(f"Error in _review_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Ä–µ–≤—å—é")

    async def _approve_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏"""
        try:
            article_id = int(callback.data.split("_")[1])
            await self.db.update_status(article_id, "approved")
            
            await callback.message.edit_text(
                text=f"‚úÖ –°—Ç–∞—Ç—å—è #{article_id} –æ–¥–æ–±—Ä–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.keyboards.publish_keyboard(article_id)
            )
            await state.set_state(ArticleStates.APPROVED)
            
        except Exception as e:
            logger.error(f"Error in _approve_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏")

    async def _reject_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏"""
        try:
            article_id = int(callback.data.split("_")[1])
            await self.db.update_status(article_id, "rejected")
            
            await callback.message.edit_text(
                text=f"‚ùå –°—Ç–∞—Ç—å—è #{article_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                reply_markup=self.keyboards.back_keyboard()
            )
            await state.set_state(ArticleStates.REJECTED)
            
        except Exception as e:
            logger.error(f"Error in _reject_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏")

    async def _delete_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏"""
        try:
            article_id = int(callback.data.split("_")[1])
            await self.db.delete_article(article_id)
            
            await callback.message.edit_text("üóë –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞")
            await state.clear()
            
        except Exception as e:
            logger.error(f"Error in _delete_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏")

    async def _request_changes_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∞–≤–æ–∫"""
        try:
            article_id = int(callback.data.split("_")[1])
            
            await callback.message.edit_text(
                text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏ #{article_id}:",
                reply_markup=self.keyboards.back_keyboard()
            )
            await state.set_state(ArticleStates.REQUEST_CHANGES)
            await state.update_data(article_id=article_id)
            
        except Exception as e:
            logger.error(f"Error in _request_changes_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∞–≤–æ–∫")

    async def _changes_comment_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏"""
        try:
            data = await state.get_data()
            await self.db.log_review(data['article_id'], message.text)
            
            await message.answer(
                "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–∞–≤–∫–∞–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
                reply_markup=self.keyboards.editor_keyboard(data['article_id'])
            )
            await state.set_state(ArticleStates.DRAFT)
            
        except Exception as e:
            logger.error(f"Error in _changes_comment_handler: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    async def _back_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        try:
            data = await state.get_data()
            await callback.message.edit_text(
                text="–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏",
                reply_markup=self.keyboards.editor_keyboard(data['article_id'])
            )
            await state.set_state(ArticleStates.DRAFT)
            
        except Exception as e:
            logger.error(f"Error in _back_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")

    async def _publish_to_channel(self, article_id: int):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –≤ DigitalCriticism"""
        try:
            article = await self.db.get_article(article_id)
            if not article:
                raise ValueError("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            decrypted = self.crypto.decrypt_file(Path(article.file_path).read_bytes())
            
            await self.bot.send_message(
                chat_id=os.getenv("CHANNEL_ID"),  
                text=decrypted,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    async def _get_channel_info(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            chat = await self.bot.get_chat("@digitalcriticism")
            
            admins = await self.bot.get_chat_administrators(chat.id)
            bot_is_admin = any([admin.user.id == self.bot.id for admin in admins])
            
            await message.answer(
                f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
                f"ID: <code>{chat.id}</code>\n"
                f"–¢–∏–ø: {chat.type}\n"
                f"–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {'‚úÖ' if bot_is_admin else '‚ùå'}\n\n"
                f"–î–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
                f"CHANNEL_ID={chat.id}",
                parse_mode="HTML"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _get_channel_info_handler: {e}")

    async def _test_channel(self, message: Message):
        """–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
        test_msg = await self.bot.send_message(
            chat_id=os.getenv("CHANNEL_ID"),
            text="üîß –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"
        )
        await message.answer(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ ID: {test_msg.message_id}")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        handlers = [
            (self._start_handler, Command("start")),
            (self._get_channel_info, Command("get_channel_info")),
            (self._text_handler, F.text),
            (self._edit_handler, F.data.startswith("edit_")),
            (self._review_handler, F.data.startswith("review_")),
            (self._approve_handler, F.data.startswith("approve_")),
            (self._reject_handler, F.data.startswith("reject_")),
            (self._delete_handler, F.data.startswith("delete_")),
            (self._request_changes_handler, F.data.startswith("request_changes_")),
            (self._back_handler, F.data == "back"),
            (self._changes_comment_handler, ArticleStates.REQUEST_CHANGES)
        ]
        
        for handler, *filters in handlers:
            if filters:
                if handler.__name__.startswith('_'):
                    self.dp.message.register(handler, *filters)
                else:
                    self.dp.callback_query.register(handler, *filters)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.db.connect()
            self.vault_path.mkdir(parents=True, exist_ok=True)
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            
        finally:
            await self.db.close()
            await self.bot.session.close()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    bot = NewsBot()
    await bot.run()


if __name__ == "__main__":
    asyncio.run(main())
